/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import admintools.CSVOperate;
import admintools.DBExportAction;
import admintools.DBImportAction;
import admintools.DBUpdateAction;
import admintools.JDBCConnection;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Enumeration;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lera
 */
public class OperateFrame extends javax.swing.JFrame {
    private JDBCConnection connection;
    private int idOperation;// идентификатор операций (импорт, экспорт, обновление)
    private ConnectOptions connOptions;
    private final String defaultTitle = "Admin Tools for database operations: ";
    private admintools.DBOperation Operations;
    
    /**
     * Creates new form OperateFrame
     */
    public OperateFrame() {
        initComponents();
        idOperation = 0;
//        setFrameTitle();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        btnOpenFile = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstTableName = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstTargetList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnPreviouse = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        OKButton = new javax.swing.JButton();
        btnSendTo = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtStep = new javax.swing.JTextArea();
        OperateProgressBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuFileConnection = new javax.swing.JMenu();
        mnuConnectProperties = new javax.swing.JMenuItem();
        mnuConnectParameters = new javax.swing.JMenuItem();
        mnuFileOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuFileExit = new javax.swing.JMenuItem();
        mnuData = new javax.swing.JMenu();
        mnuDataImport = new javax.swing.JMenuItem();
        mnuDataExport = new javax.swing.JMenuItem();
        mnuDataUpdate = new javax.swing.JMenuItem();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jToolBar1.setRollover(true);

        btnOpenFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/OpenFile.png"))); // NOI18N
        btnOpenFile.setToolTipText("открыть файл");
        btnOpenFile.setFocusable(false);
        btnOpenFile.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnOpenFile.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnOpenFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenFileActionPerformed(evt);
            }
        });
        jToolBar1.add(btnOpenFile);

        jButton1.setText("jButton1");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton1);

        jButton2.setText("jButton2");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);

        jLabel2.setText("jLabel2");

        jScrollPane1.setViewportView(lstTableName);

        lstTargetList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lstTargetList);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane3.setViewportView(jTable1);

        btnPreviouse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/NavBack.png"))); // NOI18N

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/NavForward.png"))); // NOI18N

        OKButton.setText("Отмена");

        btnSendTo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/NavForward.png"))); // NOI18N

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtStep.setBackground(new java.awt.Color(212, 208, 200));
        txtStep.setColumns(20);
        txtStep.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txtStep.setLineWrap(true);
        txtStep.setRows(5);
        txtStep.setWrapStyleWord(true);
        txtStep.setFocusable(false);
        jScrollPane4.setViewportView(txtStep);

        OperateProgressBar.setStringPainted(true);

        mnuFile.setText("Файл");

        mnuFileConnection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/base.png"))); // NOI18N
        mnuFileConnection.setText("Соединение");

        mnuConnectProperties.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuConnectProperties.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/CommentHS.png"))); // NOI18N
        mnuConnectProperties.setText("Выбрать файл свойств");
        mnuConnectProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuConnectPropertiesActionPerformed(evt);
            }
        });
        mnuFileConnection.add(mnuConnectProperties);

        mnuConnectParameters.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuConnectParameters.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/info.png"))); // NOI18N
        mnuConnectParameters.setText("Окно ввода параметров");
        mnuConnectParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuConnectParametersActionPerformed(evt);
            }
        });
        mnuFileConnection.add(mnuConnectParameters);

        mnuFile.add(mnuFileConnection);

        mnuFileOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnuFileOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/OpenFile.png"))); // NOI18N
        mnuFileOpen.setText("Открыть");
        mnuFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mnuFileOpen);
        mnuFile.add(jSeparator1);

        mnuFileExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/exit.png"))); // NOI18N
        mnuFileExit.setText("Выход");
        mnuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuFileExit);

        jMenuBar1.add(mnuFile);

        mnuData.setText("Данные");
        mnuData.setEnabled(false);

        mnuDataImport.setText("Импорт");
        mnuDataImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDataImportActionPerformed(evt);
            }
        });
        mnuData.add(mnuDataImport);

        mnuDataExport.setText("Экспорт");
        mnuDataExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDataExportActionPerformed(evt);
            }
        });
        mnuData.add(mnuDataExport);

        mnuDataUpdate.setText("Обновление даннчх");
        mnuDataUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDataUpdateActionPerformed(evt);
            }
        });
        mnuData.add(mnuDataUpdate);

        jMenuBar1.add(mnuData);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSendTo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPreviouse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OKButton))
                    .addComponent(jScrollPane4)
                    .addComponent(OperateProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(65, Short.MAX_VALUE))
            .addComponent(jScrollPane3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OperateProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPreviouse)
                            .addComponent(btnNext)
                            .addComponent(OKButton)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnSendTo)
                            .addGap(51, 51, 51))))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        OperateProgressBar.setValue(0);
        
        // задаём заголовок фрейма
        setTitle(defaultTitle);
        
        // задаём значок для формы
        URL url;
        url = OperateFrame.class.getClassLoader().getResource("image/base.png");
        setIconImage(new ImageIcon(url).getImage());
        
//        setIdOperation();// задаём тип выполняемой опереции
        this.setLocationRelativeTo(null);// располагаем форму по середине экрана
//        try {
//            btnPreviouse.doClick();
//            
//        } catch(java.lang.Exception ex){
//        }
    }//GEN-LAST:event_formComponentShown

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // закрываем соединение с базой перед выходом
        closeConnection();
        System.exit(0);
    }//GEN-LAST:event_formComponentHidden

    private void btnOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenFileActionPerformed
        // отображаем окно выбора файла
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        chooser.setMultiSelectionEnabled(false);// множественныый выбор запрещён
        // фильтр файлов по формату
        FileFilter filter = new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.getName().toLowerCase().endsWith(".csv") || 
                        f.getName().toLowerCase().endsWith(".txt") || 
                        f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Текстовые файлы с разделителями (*.csv,*.txt)";
            }
        };
        chooser.setFileFilter(filter);// устанавливаем фильтр для окна выбора файла
        int result = chooser.showOpenDialog(this);
        
        // если пользователь выбрал файл, то отображаем его название в заголовке
        if(result == JFileChooser.APPROVE_OPTION){
            // устанавливаем заголовок окна в ихсодное состояние
//            setFrameTitle();
            
            String name;
            try {
                name = chooser.getSelectedFile().getCanonicalPath();
                System.out.println("file - " + name);
                
//                setTitle(getTitle() + " : " + name);
                // окно дополнительных параметров файла
                OptionCSVDialog csvDialog = new OptionCSVDialog(this, true);
                csvDialog.setLocationRelativeTo(this);// выводим окно в центре экрана
                csvDialog.setHeader(false);
                csvDialog.setVisible(true);
                if(csvDialog.isOk()) {
                    String separator = csvDialog.getSeparator();
                    boolean header = csvDialog.isHeader();
                    // проверем выбор пользователя
                    CSVOperate csvReader = new CSVOperate(name, separator);
                    csvReader.setHeader(header);// есть ли заголовки
                    csvReader.readData();// считываем данные из файла
                    Object[][] content = csvReader.getData();
                    String[] columnName = csvReader.getColumnName();
                    // получаем модель данных для таблицы
                    DefaultTableModel model = new DefaultTableModel(content, 
                            columnName);
                    jTable1.setModel(model);
    //                btnNext.doClick();
    //                btnNext.setEnabled(false);
    //                Operations.addListItem();// 
                }
            } catch (IOException ex) {
                Logger.getLogger(OperateFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_btnOpenFileActionPerformed

    private void mnuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileExitActionPerformed
        // TODO add your handling code here:
        closeConnection();// закрываем соединение с базой
        System.exit(0);// завершение работы
    }//GEN-LAST:event_mnuFileExitActionPerformed

    private void mnuDataImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDataImportActionPerformed
        // TODO add your handling code here:
        idOperation = 0;
        DBImportAction importAction = new DBImportAction(lstTableName, lstTargetList, txtStep, 
                jLabel1, jLabel2, jTable1, connection, btnSendTo, btnNext, btnPreviouse, OKButton);
        setFrameTitle();
        importAction.Start();// начало операции по импорту данных
    }//GEN-LAST:event_mnuDataImportActionPerformed

    private void mnuDataExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDataExportActionPerformed
        // TODO add your handling code here:
        idOperation = 1;
        DBExportAction exportAction = new DBExportAction(lstTableName, 
                lstTargetList, txtStep, jLabel1, jLabel2, jTable1, connection, 
                btnSendTo, btnNext, btnPreviouse, OKButton);
        setFrameTitle();
        exportAction.Start();
//        dbOperate.moveNext();
    }//GEN-LAST:event_mnuDataExportActionPerformed

    private void mnuDataUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDataUpdateActionPerformed
        // TODO add your handling code here:
        idOperation = 2;
        setFrameTitle();
        DBUpdateAction updateAction = new DBUpdateAction(lstTableName, 
                lstTargetList, txtStep, jLabel1, jLabel2, jTable1, connection, 
                btnSendTo, btnNext, btnPreviouse, OKButton);
        updateAction.Start();// начало операции по обновлению данных
//        dbOperate.moveNext();
    }//GEN-LAST:event_mnuDataUpdateActionPerformed

    /**
     * Открываем соединение с помощью выбранного файла свойств
     * @param evt 
     */
    private void mnuConnectPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuConnectPropertiesActionPerformed
        // отображаем диалоговое окно выбора файла
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileNameExtensionFilter("Файлы свойств, .properties", "properties"));
        chooser.showDialog(this, "Открыть файл свойств подключения");
        File f = chooser.getSelectedFile();// выбранный пользователем файл
        if(chooser.accept(f)){
            // если пользователь выбрал файл, то печатаем его имя
            System.out.println(chooser.getName(f));
            try {
                mnuData.setEnabled(openConnection(f));
            } catch (IOException | SQLException | ClassNotFoundException ex) {
                Logger.getLogger(OperateFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
            
    }//GEN-LAST:event_mnuConnectPropertiesActionPerformed

    private void mnuConnectParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuConnectParametersActionPerformed
        // отображаем на экране окно ввода параметров подключения
        try {
            mnuData.setEnabled(openConnection(null));
        } catch (IOException | SQLException | ClassNotFoundException ex) {
            Logger.getLogger(OperateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnuConnectParametersActionPerformed

    private void mnuFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileOpenActionPerformed
        // TODO add your handling code here:
        btnOpenFile.doClick();
    }//GEN-LAST:event_mnuFileOpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OperateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(() -> {
            new OperateFrame().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OKButton;
    private javax.swing.JProgressBar OperateProgressBar;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnOpenFile;
    private javax.swing.JButton btnPreviouse;
    private javax.swing.JButton btnSendTo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JList lstTableName;
    private javax.swing.JList lstTargetList;
    private javax.swing.JMenuItem mnuConnectParameters;
    private javax.swing.JMenuItem mnuConnectProperties;
    private javax.swing.JMenu mnuData;
    private javax.swing.JMenuItem mnuDataExport;
    private javax.swing.JMenuItem mnuDataImport;
    private javax.swing.JMenuItem mnuDataUpdate;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuFileConnection;
    private javax.swing.JMenuItem mnuFileExit;
    private javax.swing.JMenuItem mnuFileOpen;
    private javax.swing.JTextArea txtStep;
    // End of variables declaration//GEN-END:variables

//    /**
//     * @param connection the connection to set
//     */
//    public void setConnection(JDBCConnection connection) {
//        this.connection = connection;
//    }
    
    /**
     * @param idOperation the idOperation to set
     */
    private void setIdOperation() {
        // название кнопки
        switch (idOperation) {
            case 0:
                OKButton.setText("Импорт");
                break;
            case 1:
                OKButton.setText("Экспорт");
                break;
            default:
                OKButton.setText("Обновить данные");
                break;
        }
        OKButton.setEnabled(false);// делаем её недоступной
    }
    
    /**
     * устанавливает заголовок окна
     */
    private void setFrameTitle(){
        String title;
        switch (idOperation) {
            case 0:
                title = defaultTitle + "Импорт данных";
                break;
            case 1:
                title = defaultTitle + "Экспорт данных";
                break;
            default:
                title = defaultTitle + "Обновление данных";
                break;
        }
        setTitle(title);
        setIdOperation();
    }
    
     
    private class ConnectOptions{

        private String databaseName;
        private String hostIP;
        private String serverPort;
        private String username;
        private String Password;
        private String aliasName;
        private boolean accessOpen;// флаг открытия доступа к базе данных
        private File fileName;
        
        public ConnectOptions() {
            accessOpen = false;// доступ пока закрыт
        }

        /**
         * @return the databaseName
         */
        public String getDatabaseName() {
            return databaseName;
        }

        /**
         * @param databaseName the databaseName to set
         */
        public void setDatabaseName(String databaseName) {
            this.databaseName = databaseName;
        }

        /**
         * @return the hostIP
         */
        public String getHostIP() {
            return hostIP;
        }

        /**
         * @param hostIP the hostIP to set
         */
        public void setHostIP(String hostIP) {
            this.hostIP = hostIP;
        }

        /**
         * @return the serverPort
         */
        public String getServerPort() {
            return serverPort;
        }

        /**
         * @param serverPort the serverPort to set
         */
        public void setServerPort(String serverPort) {
            this.serverPort = serverPort;
        }

        /**
         * @return the username
         */
        public String getUsername() {
            return username;
        }

        /**
         * @param username the username to set
         */
        public void setUsername(String username) {
            this.username = username;
        }

        /**
         * @return the Password
         */
        public String getPassword() {
            return Password;
        }

        /**
         * @param Password the Password to set
         */
        public void setPassword(String Password) {
            this.Password = Password;
        }

        /**
         * @return the accessOpen
         */
        public boolean isAccessOpen() {
            return accessOpen;
        }

        /**
         * @param accessOpen the accessOpen to set
         */
        public void setAccessOpen(boolean accessOpen) {
            this.accessOpen = accessOpen;
        }
        
        /**
         * отображает окно доступа для подключения к базе данных
         */
        public void showLoginframe(){
            LoginFrame logframe = new LoginFrame();// создаём экземпляр формы
            // если задан файл свойств, то считываем его и задаём параметры соединения для формы доступа
            if(fileName != null) {
                try {
                    readConnectProperties();
                } catch (IOException ex) {
                    Logger.getLogger(OperateFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                logframe.setDatabaseName(databaseName);
                logframe.setHostIP(hostIP);
                logframe.setServerPort(serverPort);
                logframe.setUserName(username);
            }
            logframe.showDialog(OperateFrame.this);// показываем его
            if(logframe.isOk()) {
                hostIP = logframe.getHostIP();
                serverPort = logframe.getServerPort();
                databaseName = logframe.getDatabaseName();
                username = logframe.getUserName();
                Password = logframe.getPassword();
                aliasName = logframe.getAliasName();
            } else {
                databaseName = "";
            }
        }

        /**
         * @return the aliasName
         */
        public String getAliasName() {
            return aliasName;
        }

        /**
         * @param aliasName the aliasName to set
         */
        public void setAliasName(String aliasName) {
            this.aliasName = aliasName;
        }

        /**
         * @return the fileName
         */
        public File getFileName() {
            return fileName;
        }

        /**
         * @param fileName the fileName to set
         */
        public void setFileName(File fileName) {
            this.fileName = fileName;
        }
        
        private void readConnectProperties() throws IOException {
            Properties props = new Properties();// создаём класс для чтения из файла свойств
            try {
                // создаём поток чтения данных из файла
                FileInputStream fin = new FileInputStream(fileName);
                props.load(fin);// считываем свойства

                // получаем все перечисенные свойства
                Enumeration e = props.propertyNames();
                while(e.hasMoreElements()) {
                    String propName = e.nextElement().toString();// получаем имя свойства
                    System.out.println(propName.toLowerCase() + "=" + props.getProperty(propName));
                    // проверяем, что содержится в имени свойства
                    if(propName.toLowerCase().contains("database")) {
                        databaseName = props.getProperty(propName);
                    } else if(propName.toLowerCase().contains("hostip")) {
                        hostIP = props.getProperty(propName);
                    } else if(propName.toLowerCase().contains("serverport")) {
                        serverPort = props.getProperty(propName);
                    } else if(propName.toLowerCase().contains("user")) {
                        username = props.getProperty(propName);
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(OperateFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private boolean openConnection(File file) throws FileNotFoundException, 
            IOException, SQLException, ClassNotFoundException {
        // открываем соединение с базой данных
        //читаем файл свойств для загрузки драйвера и других параметров
//        Properties props= new Properties();
        String message = "Connection is not opened!";
        boolean retval;
        // создаём класс для получения доступа к базе данных
        if(connOptions == null) connOptions = new ConnectOptions();
        connOptions.setFileName(file);
        connOptions.showLoginframe();
        if(!connOptions.getDatabaseName().equals("")) {
            try {
                // set drivername
                String driver = "org.firebirdsql.jdbc.FBDriver";
                String url = "jdbc:firebirdsql://" + connOptions.getHostIP() + ":" +
                    connOptions.getServerPort() + "/" + 
                    connOptions.getDatabaseName();

                // открываем первоначальное соединение с базой данных
                connection = new JDBCConnection(driver, url, connOptions.getUsername(),
                        connOptions.getPassword());
                if (connection.isClosedConn() != true){
                    message = "Connection is opening!";
                    retval = true;
                } else{
                    retval = false;
    //                System.exit(0);
                }
                System.out.println("retval=" + retval);
                // окно сообщения по результатам соединения
                getInformDialog(this, message, InformDialog.InformType.CONNECT);
                return retval;
            } catch (SQLException | ClassNotFoundException ex){
                // окно сообщения по результатам соединения
                getInformDialog(this, message, InformDialog.InformType.CONNECT);
                return false;
            }
        } else {return false;}
            
    }
    
    private void closeConnection(){
        try {
            if (connection != null && !connection.isClosedConn()) {
            JDBCConnection.getConn().close();
            if(connection.isClosedConn()){
                connection = null;
                
            }
            }
        } catch (SQLException ex) {
            Logger.getLogger(OperateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void getInformDialog(JFrame owner, String message, InformDialog.InformType type){
        InformDialog idialog;
        if(owner != null){
            idialog = new InformDialog(owner);
        } else {
            idialog = new InformDialog();
        }
        idialog.setMessage(message);
        idialog.setType(type);
        idialog.setVisible(true);
    }
    
    private class MyTableModelImpl extends MyTableModel {
        
        public MyTableModelImpl(ResultSet resultset) throws SQLException {
            super(resultset);
        }

        public MyTableModelImpl(Object[][] content, String[] columnName, Class[] columnClass) {
            super(content, columnName, columnClass);
        }

        public MyTableModelImpl(Object[][] content) {
            super(content);
        }
        
    }
}
